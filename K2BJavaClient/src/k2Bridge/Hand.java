/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package k2Bridge;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-4-24")
public class Hand implements org.apache.thrift.TBase<Hand, Hand._Fields>, java.io.Serializable, Cloneable, Comparable<Hand> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Hand");

  private static final org.apache.thrift.protocol.TField X_FIELD_DESC = new org.apache.thrift.protocol.TField("x", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField Y_FIELD_DESC = new org.apache.thrift.protocol.TField("y", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField HAND_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("handState", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TRACKING_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("trackingState", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HandStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HandTupleSchemeFactory());
  }

  public double x; // required
  public double y; // required
  /**
   * 
   * @see HandState
   */
  public HandState handState; // required
  /**
   * 
   * @see TrackingState
   */
  public TrackingState trackingState; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    X((short)1, "x"),
    Y((short)2, "y"),
    /**
     * 
     * @see HandState
     */
    HAND_STATE((short)3, "handState"),
    /**
     * 
     * @see TrackingState
     */
    TRACKING_STATE((short)4, "trackingState");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // X
          return X;
        case 2: // Y
          return Y;
        case 3: // HAND_STATE
          return HAND_STATE;
        case 4: // TRACKING_STATE
          return TRACKING_STATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __X_ISSET_ID = 0;
  private static final int __Y_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.X, new org.apache.thrift.meta_data.FieldMetaData("x", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.Y, new org.apache.thrift.meta_data.FieldMetaData("y", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HAND_STATE, new org.apache.thrift.meta_data.FieldMetaData("handState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, HandState.class)));
    tmpMap.put(_Fields.TRACKING_STATE, new org.apache.thrift.meta_data.FieldMetaData("trackingState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TrackingState.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Hand.class, metaDataMap);
  }

  public Hand() {
  }

  public Hand(
    double x,
    double y,
    HandState handState,
    TrackingState trackingState)
  {
    this();
    this.x = x;
    setXIsSet(true);
    this.y = y;
    setYIsSet(true);
    this.handState = handState;
    this.trackingState = trackingState;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Hand(Hand other) {
    __isset_bitfield = other.__isset_bitfield;
    this.x = other.x;
    this.y = other.y;
    if (other.isSetHandState()) {
      this.handState = other.handState;
    }
    if (other.isSetTrackingState()) {
      this.trackingState = other.trackingState;
    }
  }

  public Hand deepCopy() {
    return new Hand(this);
  }

  @Override
  public void clear() {
    setXIsSet(false);
    this.x = 0.0;
    setYIsSet(false);
    this.y = 0.0;
    this.handState = null;
    this.trackingState = null;
  }

  public double getX() {
    return this.x;
  }

  public Hand setX(double x) {
    this.x = x;
    setXIsSet(true);
    return this;
  }

  public void unsetX() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __X_ISSET_ID);
  }

  /** Returns true if field x is set (has been assigned a value) and false otherwise */
  public boolean isSetX() {
    return EncodingUtils.testBit(__isset_bitfield, __X_ISSET_ID);
  }

  public void setXIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __X_ISSET_ID, value);
  }

  public double getY() {
    return this.y;
  }

  public Hand setY(double y) {
    this.y = y;
    setYIsSet(true);
    return this;
  }

  public void unsetY() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __Y_ISSET_ID);
  }

  /** Returns true if field y is set (has been assigned a value) and false otherwise */
  public boolean isSetY() {
    return EncodingUtils.testBit(__isset_bitfield, __Y_ISSET_ID);
  }

  public void setYIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __Y_ISSET_ID, value);
  }

  /**
   * 
   * @see HandState
   */
  public HandState getHandState() {
    return this.handState;
  }

  /**
   * 
   * @see HandState
   */
  public Hand setHandState(HandState handState) {
    this.handState = handState;
    return this;
  }

  public void unsetHandState() {
    this.handState = null;
  }

  /** Returns true if field handState is set (has been assigned a value) and false otherwise */
  public boolean isSetHandState() {
    return this.handState != null;
  }

  public void setHandStateIsSet(boolean value) {
    if (!value) {
      this.handState = null;
    }
  }

  /**
   * 
   * @see TrackingState
   */
  public TrackingState getTrackingState() {
    return this.trackingState;
  }

  /**
   * 
   * @see TrackingState
   */
  public Hand setTrackingState(TrackingState trackingState) {
    this.trackingState = trackingState;
    return this;
  }

  public void unsetTrackingState() {
    this.trackingState = null;
  }

  /** Returns true if field trackingState is set (has been assigned a value) and false otherwise */
  public boolean isSetTrackingState() {
    return this.trackingState != null;
  }

  public void setTrackingStateIsSet(boolean value) {
    if (!value) {
      this.trackingState = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case X:
      if (value == null) {
        unsetX();
      } else {
        setX((Double)value);
      }
      break;

    case Y:
      if (value == null) {
        unsetY();
      } else {
        setY((Double)value);
      }
      break;

    case HAND_STATE:
      if (value == null) {
        unsetHandState();
      } else {
        setHandState((HandState)value);
      }
      break;

    case TRACKING_STATE:
      if (value == null) {
        unsetTrackingState();
      } else {
        setTrackingState((TrackingState)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case X:
      return Double.valueOf(getX());

    case Y:
      return Double.valueOf(getY());

    case HAND_STATE:
      return getHandState();

    case TRACKING_STATE:
      return getTrackingState();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case X:
      return isSetX();
    case Y:
      return isSetY();
    case HAND_STATE:
      return isSetHandState();
    case TRACKING_STATE:
      return isSetTrackingState();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Hand)
      return this.equals((Hand)that);
    return false;
  }

  public boolean equals(Hand that) {
    if (that == null)
      return false;

    boolean this_present_x = true;
    boolean that_present_x = true;
    if (this_present_x || that_present_x) {
      if (!(this_present_x && that_present_x))
        return false;
      if (this.x != that.x)
        return false;
    }

    boolean this_present_y = true;
    boolean that_present_y = true;
    if (this_present_y || that_present_y) {
      if (!(this_present_y && that_present_y))
        return false;
      if (this.y != that.y)
        return false;
    }

    boolean this_present_handState = true && this.isSetHandState();
    boolean that_present_handState = true && that.isSetHandState();
    if (this_present_handState || that_present_handState) {
      if (!(this_present_handState && that_present_handState))
        return false;
      if (!this.handState.equals(that.handState))
        return false;
    }

    boolean this_present_trackingState = true && this.isSetTrackingState();
    boolean that_present_trackingState = true && that.isSetTrackingState();
    if (this_present_trackingState || that_present_trackingState) {
      if (!(this_present_trackingState && that_present_trackingState))
        return false;
      if (!this.trackingState.equals(that.trackingState))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_x = true;
    list.add(present_x);
    if (present_x)
      list.add(x);

    boolean present_y = true;
    list.add(present_y);
    if (present_y)
      list.add(y);

    boolean present_handState = true && (isSetHandState());
    list.add(present_handState);
    if (present_handState)
      list.add(handState.getValue());

    boolean present_trackingState = true && (isSetTrackingState());
    list.add(present_trackingState);
    if (present_trackingState)
      list.add(trackingState.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(Hand other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetX()).compareTo(other.isSetX());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetX()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.x, other.x);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetY()).compareTo(other.isSetY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.y, other.y);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandState()).compareTo(other.isSetHandState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handState, other.handState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTrackingState()).compareTo(other.isSetTrackingState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrackingState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trackingState, other.trackingState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Hand(");
    boolean first = true;

    sb.append("x:");
    sb.append(this.x);
    first = false;
    if (!first) sb.append(", ");
    sb.append("y:");
    sb.append(this.y);
    first = false;
    if (!first) sb.append(", ");
    sb.append("handState:");
    if (this.handState == null) {
      sb.append("null");
    } else {
      sb.append(this.handState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("trackingState:");
    if (this.trackingState == null) {
      sb.append("null");
    } else {
      sb.append(this.trackingState);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HandStandardSchemeFactory implements SchemeFactory {
    public HandStandardScheme getScheme() {
      return new HandStandardScheme();
    }
  }

  private static class HandStandardScheme extends StandardScheme<Hand> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Hand struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // X
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.x = iprot.readDouble();
              struct.setXIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // Y
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.y = iprot.readDouble();
              struct.setYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HAND_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.handState = k2Bridge.HandState.findByValue(iprot.readI32());
              struct.setHandStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TRACKING_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.trackingState = k2Bridge.TrackingState.findByValue(iprot.readI32());
              struct.setTrackingStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Hand struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(X_FIELD_DESC);
      oprot.writeDouble(struct.x);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(Y_FIELD_DESC);
      oprot.writeDouble(struct.y);
      oprot.writeFieldEnd();
      if (struct.handState != null) {
        oprot.writeFieldBegin(HAND_STATE_FIELD_DESC);
        oprot.writeI32(struct.handState.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.trackingState != null) {
        oprot.writeFieldBegin(TRACKING_STATE_FIELD_DESC);
        oprot.writeI32(struct.trackingState.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HandTupleSchemeFactory implements SchemeFactory {
    public HandTupleScheme getScheme() {
      return new HandTupleScheme();
    }
  }

  private static class HandTupleScheme extends TupleScheme<Hand> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Hand struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetX()) {
        optionals.set(0);
      }
      if (struct.isSetY()) {
        optionals.set(1);
      }
      if (struct.isSetHandState()) {
        optionals.set(2);
      }
      if (struct.isSetTrackingState()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetX()) {
        oprot.writeDouble(struct.x);
      }
      if (struct.isSetY()) {
        oprot.writeDouble(struct.y);
      }
      if (struct.isSetHandState()) {
        oprot.writeI32(struct.handState.getValue());
      }
      if (struct.isSetTrackingState()) {
        oprot.writeI32(struct.trackingState.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Hand struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.x = iprot.readDouble();
        struct.setXIsSet(true);
      }
      if (incoming.get(1)) {
        struct.y = iprot.readDouble();
        struct.setYIsSet(true);
      }
      if (incoming.get(2)) {
        struct.handState = k2Bridge.HandState.findByValue(iprot.readI32());
        struct.setHandStateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.trackingState = k2Bridge.TrackingState.findByValue(iprot.readI32());
        struct.setTrackingStateIsSet(true);
      }
    }
  }

}

